#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""used to test the mapper module of the agent

"""

import unittest

from tingyun.logistics.workshop.quantile import QuantileP2


class TestQuanTileCase(unittest.TestCase):
    """
    """

    def setUp(self):
        self.quantile_list = [0.2857142857142857, 0.42857142857142855, 0.5714285714285714, 0.7142857142857142]
        self.quantile_list_3 = [0.2857142857142857, 0.42857142857142855, 0.5714285714285714]
        self.quantile_list_2 = [0.2857142857142857, 0.42857142857142855]
        self.quantile_list_1 = [0.2857142857142857]
        unittest.TestCase.setUp(self)

    def tearDown(self):
        unittest.TestCase.tearDown(self)

    def test_binary_search(self):
        """
        :return:
        """
        p2 = QuantileP2([8, 19, 29])

        self.assertEqual(p2.binary_search([1, 2, 3, 4, 5, 6, 7], 0), -1)
        self.assertEqual(p2.binary_search([1, 2, 3, 4, 5, 6, 7], 4), 3)
        self.assertEqual(p2.binary_search([1, 2, 3, 4, 5, 6, 7], 6), 5)
        self.assertEqual(p2.binary_search([1, 2, 3, 4, 5, 6, 7], 8), -8)

    def test_quan_tile_1(self):
        """
        :return:
        """
        p2 = QuantileP2(self.quantile_list)
        data = [3110, 3770, 3990, 3990, 3000, 3880, 3330, 3440, 3440, 3000, 3550, 3440, 3220, 3330, 3220, 3110, 3770,
                3110, 3880, 3330, 3440, 3440, 3000, 3110, 3220, 3440, 3000, 3550, 3880, 3990, 3990, 3550, 3110, 3330,
                3330, 3000, 3880, 3660, 3110, 3990, 3110, 3990, 3440, 3330, 3660, 3660, 3000, 3220, 3220, 3330, 3660,
                3990, 3440, 3220, 3220, 3440, 3440, 3880, 3990, 3550, 3440, 3110, 3330, 3440, 3110, 3770, 3330, 3220,
                3440, 3440, 3440, 3220, 3660, 3000, 3440, 3550, 3220, 3220, 3110, 3660, 3110, 3880, 3550, 3770, 3220,
                3440, 3220, 3110, 3220, 3220, 3110, 3880, 3550, 3770, 3770, 3550, 3990, 3220, 3880, 3660, 3110, 3550,
                3990, 3110, 3550, 3880, 3110, 3770, 3770, 3110, 3440, 3770, 3000, 3110, 3990, 3110, 3550, 3770, 3990,
                3000, 3990, 3110, 3550, 3880, 3110, 3880, 3550, 3220, 3550, 3550, 3770, 3990, 3550, 3220, 3330, 3990,
                3770, 3770, 3550, 3770, 3880, 3660, 3330, 3990, 3990, 3000, 3110, 3440, 3220, 3000, 3550, 3770, 3110,
                3550, 3330, 3990, 3110, 3330, 3550, 3440, 3220, 3550, 3220, 3330, 3000, 3660, 3110, 3770, 3110, 3660,
                3550, 3440, 3990, 3330, 3990, 3550, 3990, 3550, 3330, 3770, 3550, 3550, 3000, 3440, 3000, 3330, 3440,
                3110, 3880, 3110, 3550, 3660, 3990, 3220, 3330, 3330, 3000, 3660, 3660, 3220]

        for d in [d * 1.0 for d in data]:
            p2.add(d)

        result = p2.markers
        expect_result = [3000.0, 3106.843320783761, 3227.3217789803944, 3299.376129798188, 3392.8418138044944,
                         3469.447497664255, 3517.824499002398, 3561.5085942589694, 3655.615558885239,
                         3876.7690820957982, 3990.0]
        self.assertEqual(result, expect_result)

    def test_quan_tile_2(self):
        p2 = QuantileP2(self.quantile_list)
        data = [3028.0, 2211.0]

        for d in [d * 1.0 for d in data]:
            p2.add(d)

        result = p2.markers
        expect_result = [2211.0, 2211.0, 2211.0, 2211.0, 2211.0, 3028.0, 3028.0, 3028.0, 3028.0, 3028.0, 3028.0]
        self.assertEqual(result, expect_result)

    def test_quan_tile_3(self):
        p2 = QuantileP2(self.quantile_list)
        data = [2, 1, 6, 6, 4, 9, 5, 6, 2, 7, 2, 4, 9, 7, 8, 4, 1, 8, 8, 8, 3, 5, 4, 1, 9, 5, 5, 6, 2, 0, 8, 5, 3, 6, 1,
                4, 8, 0, 0, 1, 1, 3, 9, 9, 6, 7, 1, 5, 8, 7, 6, 9, 3, 1, 2, 4, 8, 2, 3, 4, 7, 2, 9, 2, 3, 9, 8, 7, 6, 1,
                8, 5, 0, 8, 3, 2, 8, 0, 1, 7, 4, 9, 9, 3, 6, 2, 3, 0, 1, 4, 9, 3, 0, 9, 6, 1, 9, 7, 1, 9, 3, 4, 4, 0, 9,
                6, 2, 6, 1, 4, 9, 9, 2, 2, 3, 0, 2, 0, 4, 4, 1, 9, 2, 7, 8, 9, 6, 5, 6, 5, 1, 4, 3, 6, 4, 7, 6, 6, 5, 6,
                2, 2, 5, 4, 8, 6, 3, 4, 7, 2, 4, 8, 7, 0, 0, 0, 9, 6, 5, 2, 8, 3, 2, 1, 9, 2, 4, 0, 3, 2, 3, 6, 6, 6, 4,
                8, 1, 0, 7, 7, 2, 8, 5, 1, 3, 0, 5, 3, 3, 3, 3, 8, 8, 7, 9, 1, 3, 3, 1, 1, 0, 5, 2, 2, 4, 9, 3, 3, 5, 7,
                4, 0, 7, 4, 2, 6, 3, 2, 5, 4, 9, 0, 8, 8, 0, 6, 7, 0, 2, 3, 3, 4, 7, 9, 9, 7, 8, 5, 1, 4, 5, 0, 8, 5, 8,
                7, 0, 7, 3, 9, 5, 0, 7, 1, 2, 6, 8, 3, 3, 6, 0, 6, 0, 0, 4, 5, 6, 3, 6, 8, 6, 3, 2, 8, 9, 1, 9, 3, 8, 6,
                3, 5, 9, 0, 3, 6, 2, 9, 1, 1, 0, 6, 4, 1, 0, 9, 3, 2, 9, 5, 6, 3, 7, 8, 3, 4, 1, 0, 8, 1, 3, 0, 3, 3, 9,
                9, 7, 2, 1, 3, 5, 6, 6, 9, 5, 1, 9, 8, 8, 7, 0, 7, 3, 9, 3, 1, 6, 1, 7, 3, 3, 3, 9, 9, 8, 4, 3, 8, 1, 2,
                0, 1, 9, 6, 3, 2, 2, 5, 5, 7, 3, 4, 2, 2, 7, 5, 4, 7, 0, 6, 4, 3, 6, 4, 2, 9, 3, 4, 8, 7, 8, 2, 1, 6, 6,
                7, 0, 7, 8, 4, 8, 0, 1, 6, 9, 9, 5, 5, 7, 5, 6, 7, 4, 8, 7, 6, 7, 1, 1, 1, 1, 9, 2, 2, 0, 3, 4, 0, 6, 9,
                9, 1, 8, 5, 0, 5, 5, 4, 7, 6, 5, 6, 2, 1, 2, 5, 0, 6, 3, 7, 3, 6, 1, 3, 1, 0, 5, 3, 9, 2, 9, 9, 8, 0, 9,
                5, 3, 9, 6, 8, 0, 0, 2, 5, 3, 1, 3, 4, 2, 9, 4, 3, 0, 8, 1, 7, 0, 5, 3, 9, 5, 3, 4, 4, 1, 7, 5, 5, 8, 9,
                8, 0, 1, 0, 1, 9, 7, 8, 2, 3, 4, 7, 5, 3, 8, 7, 8, 4, 1, 3, 6, 6, 0, 8, 8, 1, 3, 5, 2, 6, 0, 1, 2, 1, 5,
                3, 5, 0, 7, 0, 2, 3, 9, 8, 2, 5, 8, 4, 8, 9, 8, 7, 2, 7, 7, 1, 2, 3, 7, 9, 7, 4, 5, 2, 6, 2, 3, 8, 8, 8,
                0, 8, 4, 7, 9, 2, 6, 7, 5, 1, 3, 0, 4, 1, 3, 8, 2, 8, 1, 0, 5, 6, 3, 5, 6, 7, 9, 2, 4, 5, 9, 2, 9, 5, 0,
                6, 1, 1, 0, 3, 9, 2, 8, 6, 6, 8, 6, 3, 9, 0, 0, 7, 1, 9, 9, 6, 4, 7, 3, 0, 1, 8, 1, 6, 5, 7, 3, 9, 7, 0,
                3, 7, 3, 3, 6, 0, 6, 3, 3, 4, 7, 4, 1, 3, 9, 3, 2, 2, 5, 0, 5, 2, 5, 1, 2, 3, 9, 0, 9, 8, 7, 9, 2, 0, 9,
                8, 9, 0, 5, 4, 4, 4, 4, 3, 2, 9, 0, 2, 5, 8, 0, 9, 4, 6, 5, 0, 2, 1, 8, 1, 4, 8, 4, 2, 0, 2, 9, 7, 7, 7,
                1, 2, 1, 3, 3, 5, 1, 9, 2, 3, 2, 7, 6, 5, 6, 9, 5, 0, 7, 9, 8, 3, 4, 5, 1, 6, 4, 6, 9, 4, 5, 0, 0, 0, 6,
                8, 3, 4, 0, 7, 8, 6, 9, 8, 8, 9, 8, 7, 8, 0, 6, 5, 8, 5, 4, 6, 3, 5, 4, 1, 0, 9, 7, 2, 4, 1, 7, 9, 3, 4,
                1, 5, 7, 9, 5, 8, 9, 4, 6, 1, 3, 5, 8, 4, 0, 4, 1, 4, 2, 4, 3, 0, 0, 8, 9, 5, 2, 7, 8, 2, 6, 1, 9, 8, 9,
                9, 0, 7, 9, 6, 8, 8, 8, 7, 4, 7, 4, 3, 3, 2, 5, 9, 5, 3, 3, 2, 3, 1, 0, 5, 7, 7, 2, 5, 9, 3, 7, 4, 1, 3,
                1, 5, 4, 0, 5, 6, 9, 1, 5, 2, 4, 5, 8, 5, 3, 0, 1, 3, 3, 4, 0, 1, 0, 8, 8, 0, 7, 9, 1, 1, 0, 5, 2, 1, 2,
                8, 2, 6, 6, 8, 2, 7, 9, 5, 5, 1, 2, 0, 0, 5, 9, 8, 8, 1, 5, 7, 2, 1, 2, 3, 5, 5, 3, 9, 4, 0, 5, 2, 2, 5,
                0, 0, 2, 5, 3, 3, 5, 2, 8, 9, 8, 8, 6, 7, 7, 9, 6, 7, 0, 6, 0, 6, 4, 8, 7, 8, 7, 4, 4, 1, 0, 4, 1, 9, 3,
                2, 1, 7, 3, 1, 1, 2, 3, 2, 9, 5, 9, 1, 8, 4, 6, 6, 1, 0, 9, 9, 3, 4, 9, 9, 0, 5, 7, 0, 5, 8, 2, 1, 3, 4,
                7, 6, 0, 3, 0, 7, 3, 0, 1, 3, 0, 1, 0, 5, 2, 3, 3, 4, 3, 2]

        for d in [d * 1.0 for d in data]:
            p2.add(d)

        result = p2.markers
        expect_result = [0.0, 0.9764452143372673, 2.1764675812274175, 2.9734028795669065, 3.746215745887095,
                         4.0062317577190765, 4.950569450460125, 5.932716755603176, 6.636746699003748,
                         7.9930524846567605, 9.0]
        self.assertEqual(result, expect_result)

    def test_quan_title_4(self):
        """
        :return:
        """
        p2 = QuantileP2(self.quantile_list)
        data = [0.0, 3009.0, 3046.0, 3070.0, 3102.0, 3119.0, 3139.0, 3150.0, 3163.0, 3179.0, 3228.0]

        for d in [d * 1.0 for d in data]:
            p2.add(d)

        result = p2.markers
        expect_result = [0.0, 3009.0, 3046.0, 3070.0, 3102.0, 3119.0, 3139.0, 3150.0, 3163.0, 3179.0, 3228.0]
        self.assertEqual(result, expect_result)

    # mz
    def test_quan_title_three_1(self):
        """
        :return:
        """
        p2 = QuantileP2(self.quantile_list_3)
        data = [3110, 3770, 3990, 3990, 3000, 3880, 3330, 3440, 3440, 3000, 3550, 3440, 3220, 3330, 3220, 3110, 3770,
                3110, 3880, 3330, 3440, 3440, 3000, 3110, 3220, 3440, 3000, 3550, 3880, 3990, 3990, 3550, 3110, 3330,
                3330, 3000, 3880, 3660, 3110, 3990, 3110, 3990, 3440, 3330, 3660, 3660, 3000, 3220, 3220, 3330, 3660,
                3990, 3440, 3220, 3220, 3440, 3440, 3880, 3990, 3550, 3440, 3110, 3330, 3440, 3110, 3770, 3330, 3220,
                3440, 3440, 3440, 3220, 3660, 3000, 3440, 3550, 3220, 3220, 3110, 3660, 3110, 3880, 3550, 3770, 3220,
                3440, 3220, 3110, 3220, 3220, 3110, 3880, 3550, 3770, 3770, 3550, 3990, 3220, 3880, 3660, 3110, 3550,
                3990, 3110, 3550, 3880, 3110, 3770, 3770, 3110, 3440, 3770, 3000, 3110, 3990, 3110, 3550, 3770, 3990,
                3000, 3990, 3110, 3550, 3880, 3110, 3880, 3550, 3220, 3550, 3550, 3770, 3990, 3550, 3220, 3330, 3990,
                3770, 3770, 3550, 3770, 3880, 3660, 3330, 3990, 3990, 3000, 3110, 3440, 3220, 3000, 3550, 3770, 3110,
                3550, 3330, 3990, 3110, 3330, 3550, 3440, 3220, 3550, 3220, 3330, 3000, 3660, 3110, 3770, 3110, 3660,
                3550, 3440, 3990, 3330, 3990, 3550, 3990, 3550, 3330, 3770, 3550, 3550, 3000, 3440, 3000, 3330, 3440,
                3110, 3880, 3110, 3550, 3660, 3990, 3220, 3330, 3330, 3000, 3660, 3660, 3220]

        for d in [d * 1.0 for d in data]:
            p2.add(d)

        result = p2.markers

        # three
        expect_result = [3000.0, 3107.703171643451, 3230.7968896612256, 3313.0561089896273, 3363.5051727374166,
                         3491.979257536348, 3524.7197581754517, 3764.690066281427, 3990.0]
        # two
        # expect_result = [3000.0, 3105.734599530712, 3230.5929236185334, 3316.3709624124094, 3354.168331674854,
        #                  3692.591068978179, 3990.0]

        # one
        # expect_result = [3000.0, 3109.459323849286, 3232.3779957708944, 3573.7371374777176, 3990.0]

        self.assertEqual(result, expect_result)

    def test_quan_title_three_2(self):
        """
        :return:
        """
        p2 = QuantileP2(self.quantile_list_3)
        data = [3028.0, 2211.0]

        for d in [d * 1.0 for d in data]:
            p2.add(d)

        result = p2.markers

        # three
        expect_result = [2211.0, 2211.0, 2211.0, 2211.0, 3028.0, 3028.0, 3028.0, 3028.0, 3028.0]

        # two
        # expect_result = [2211.0, 2211.0, 2211.0, 3028.0, 3028.0, 3028.0, 3028.0]

        # one
        # expect_result = [2211.0, 2211.0, 3028.0, 3028.0, 3028.0]

        self.assertEqual(result, expect_result)

    def test_quan_title_three_3(self):
        p2 = QuantileP2(self.quantile_list_3)
        data = [2, 1, 6, 6, 4, 9, 5, 6, 2, 7, 2, 4, 9, 7, 8, 4, 1, 8, 8, 8, 3, 5, 4, 1, 9, 5, 5, 6, 2, 0, 8, 5, 3, 6, 1,
                4, 8, 0, 0, 1, 1, 3, 9, 9, 6, 7, 1, 5, 8, 7, 6, 9, 3, 1, 2, 4, 8, 2, 3, 4, 7, 2, 9, 2, 3, 9, 8, 7, 6, 1,
                8, 5, 0, 8, 3, 2, 8, 0, 1, 7, 4, 9, 9, 3, 6, 2, 3, 0, 1, 4, 9, 3, 0, 9, 6, 1, 9, 7, 1, 9, 3, 4, 4, 0, 9,
                6, 2, 6, 1, 4, 9, 9, 2, 2, 3, 0, 2, 0, 4, 4, 1, 9, 2, 7, 8, 9, 6, 5, 6, 5, 1, 4, 3, 6, 4, 7, 6, 6, 5, 6,
                2, 2, 5, 4, 8, 6, 3, 4, 7, 2, 4, 8, 7, 0, 0, 0, 9, 6, 5, 2, 8, 3, 2, 1, 9, 2, 4, 0, 3, 2, 3, 6, 6, 6, 4,
                8, 1, 0, 7, 7, 2, 8, 5, 1, 3, 0, 5, 3, 3, 3, 3, 8, 8, 7, 9, 1, 3, 3, 1, 1, 0, 5, 2, 2, 4, 9, 3, 3, 5, 7,
                4, 0, 7, 4, 2, 6, 3, 2, 5, 4, 9, 0, 8, 8, 0, 6, 7, 0, 2, 3, 3, 4, 7, 9, 9, 7, 8, 5, 1, 4, 5, 0, 8, 5, 8,
                7, 0, 7, 3, 9, 5, 0, 7, 1, 2, 6, 8, 3, 3, 6, 0, 6, 0, 0, 4, 5, 6, 3, 6, 8, 6, 3, 2, 8, 9, 1, 9, 3, 8, 6,
                3, 5, 9, 0, 3, 6, 2, 9, 1, 1, 0, 6, 4, 1, 0, 9, 3, 2, 9, 5, 6, 3, 7, 8, 3, 4, 1, 0, 8, 1, 3, 0, 3, 3, 9,
                9, 7, 2, 1, 3, 5, 6, 6, 9, 5, 1, 9, 8, 8, 7, 0, 7, 3, 9, 3, 1, 6, 1, 7, 3, 3, 3, 9, 9, 8, 4, 3, 8, 1, 2,
                0, 1, 9, 6, 3, 2, 2, 5, 5, 7, 3, 4, 2, 2, 7, 5, 4, 7, 0, 6, 4, 3, 6, 4, 2, 9, 3, 4, 8, 7, 8, 2, 1, 6, 6,
                7, 0, 7, 8, 4, 8, 0, 1, 6, 9, 9, 5, 5, 7, 5, 6, 7, 4, 8, 7, 6, 7, 1, 1, 1, 1, 9, 2, 2, 0, 3, 4, 0, 6, 9,
                9, 1, 8, 5, 0, 5, 5, 4, 7, 6, 5, 6, 2, 1, 2, 5, 0, 6, 3, 7, 3, 6, 1, 3, 1, 0, 5, 3, 9, 2, 9, 9, 8, 0, 9,
                5, 3, 9, 6, 8, 0, 0, 2, 5, 3, 1, 3, 4, 2, 9, 4, 3, 0, 8, 1, 7, 0, 5, 3, 9, 5, 3, 4, 4, 1, 7, 5, 5, 8, 9,
                8, 0, 1, 0, 1, 9, 7, 8, 2, 3, 4, 7, 5, 3, 8, 7, 8, 4, 1, 3, 6, 6, 0, 8, 8, 1, 3, 5, 2, 6, 0, 1, 2, 1, 5,
                3, 5, 0, 7, 0, 2, 3, 9, 8, 2, 5, 8, 4, 8, 9, 8, 7, 2, 7, 7, 1, 2, 3, 7, 9, 7, 4, 5, 2, 6, 2, 3, 8, 8, 8,
                0, 8, 4, 7, 9, 2, 6, 7, 5, 1, 3, 0, 4, 1, 3, 8, 2, 8, 1, 0, 5, 6, 3, 5, 6, 7, 9, 2, 4, 5, 9, 2, 9, 5, 0,
                6, 1, 1, 0, 3, 9, 2, 8, 6, 6, 8, 6, 3, 9, 0, 0, 7, 1, 9, 9, 6, 4, 7, 3, 0, 1, 8, 1, 6, 5, 7, 3, 9, 7, 0,
                3, 7, 3, 3, 6, 0, 6, 3, 3, 4, 7, 4, 1, 3, 9, 3, 2, 2, 5, 0, 5, 2, 5, 1, 2, 3, 9, 0, 9, 8, 7, 9, 2, 0, 9,
                8, 9, 0, 5, 4, 4, 4, 4, 3, 2, 9, 0, 2, 5, 8, 0, 9, 4, 6, 5, 0, 2, 1, 8, 1, 4, 8, 4, 2, 0, 2, 9, 7, 7, 7,
                1, 2, 1, 3, 3, 5, 1, 9, 2, 3, 2, 7, 6, 5, 6, 9, 5, 0, 7, 9, 8, 3, 4, 5, 1, 6, 4, 6, 9, 4, 5, 0, 0, 0, 6,
                8, 3, 4, 0, 7, 8, 6, 9, 8, 8, 9, 8, 7, 8, 0, 6, 5, 8, 5, 4, 6, 3, 5, 4, 1, 0, 9, 7, 2, 4, 1, 7, 9, 3, 4,
                1, 5, 7, 9, 5, 8, 9, 4, 6, 1, 3, 5, 8, 4, 0, 4, 1, 4, 2, 4, 3, 0, 0, 8, 9, 5, 2, 7, 8, 2, 6, 1, 9, 8, 9,
                9, 0, 7, 9, 6, 8, 8, 8, 7, 4, 7, 4, 3, 3, 2, 5, 9, 5, 3, 3, 2, 3, 1, 0, 5, 7, 7, 2, 5, 9, 3, 7, 4, 1, 3,
                1, 5, 4, 0, 5, 6, 9, 1, 5, 2, 4, 5, 8, 5, 3, 0, 1, 3, 3, 4, 0, 1, 0, 8, 8, 0, 7, 9, 1, 1, 0, 5, 2, 1, 2,
                8, 2, 6, 6, 8, 2, 7, 9, 5, 5, 1, 2, 0, 0, 5, 9, 8, 8, 1, 5, 7, 2, 1, 2, 3, 5, 5, 3, 9, 4, 0, 5, 2, 2, 5,
                0, 0, 2, 5, 3, 3, 5, 2, 8, 9, 8, 8, 6, 7, 7, 9, 6, 7, 0, 6, 0, 6, 4, 8, 7, 8, 7, 4, 4, 1, 0, 4, 1, 9, 3,
                2, 1, 7, 3, 1, 1, 2, 3, 2, 9, 5, 9, 1, 8, 4, 6, 6, 1, 0, 9, 9, 3, 4, 9, 9, 0, 5, 7, 0, 5, 8, 2, 1, 3, 4,
                7, 6, 0, 3, 0, 7, 3, 0, 1, 3, 0, 1, 0, 5, 2, 3, 3, 4, 3, 2]

        for d in [d * 1.0 for d in data]:
            p2.add(d)

        result = p2.markers

        # three
        expect_result = [0.0, 0.9761527126099014, 1.9882965270687714, 2.9718871120069226, 3.6225750171522355,
                         4.033612418181538, 4.9612982212373, 7.044885912815514, 9.0]

        # two
        # expect_result = [0.0, 0.9737902564064672, 2.3325737827659414, 2.971799338807844, 3.682657394504873,
        #                  6.934366184619077, 9.0]

        # one
        # expect_result = [0.0, 0.9727360621834505, 2.294264275423488, 5.948293930878484, 9.0]

        self.assertEqual(result, expect_result)

    def test_quan_title_three_4(self):
        p2 = QuantileP2(self.quantile_list_3)
        data = [0.0, 3009.0, 3046.0, 3070.0, 3102.0, 3119.0, 3139.0, 3150.0, 3163.0, 3179.0, 3228.0]

        for d in [d * 1.0 for d in data]:
            p2.add(d)

        result = p2.markers

        # three
        expect_result = [0.0, 3009.0, 3046.0, 3070.0, 3102.0, 3119.0, 3139.0, 3150.0, 3228.0]

        # two
        # expect_result = [0.0, 3009.0, 3046.0, 3070.0, 3102.0, 3155.1, 3228.0]

        # one
        # expect_result = [0.0, 3009.0, 3046.0, 3135.4800000000005, 3228.0]

        self.assertEqual(result, expect_result)


if __name__ == "__main__":
    unittest.main()
